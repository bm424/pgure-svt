{"name":"PGURE-SVT","tagline":"PGURE-SVT denoising for time-resolved microscopy","body":"# PGURE-SVT\r\n\r\n**Singular value thresholding for denoising video microscopy data**\r\n\r\nPGURE-SVT is an algorithm designed to denoise image sequences acquired in microscopy. It exploits the correlations between\r\nconsecutive frames to form low-rank matrices, which are then recovered using a technique known as nuclear norm minimization.\r\nAn unbiased risk estimator for mixed Poisson-Gaussian noise is used to automate the selection of the regularization parameter, while\r\nrobust noise and motion estimation maintain broad applicability to many different types of microscopy. The algorithm is\r\ndescribed in detail in: \r\n\r\n> Furnival T, Leary RK, Midgley PA. (2015). Denoising time-resolved microscopy sequences with singular \r\n> value thresholding. *Manuscript in preparation.*\r\n\r\n---\r\n\r\n## Contents\r\n\r\n+ [Installation](#installation)\r\n+ [Using PGURE-SVT](#using-pgure-svt)\r\n\r\n## Installation\r\n\r\n#### Dependencies\r\n\r\nPGURE-SVT makes use of several 3rd-party libraries, which need to be installed first.\r\n\r\n+ **[CMake](http://www.cmake.org)** \r\n\r\n   CMake is used to configure the build before compilation.\r\n\r\n+ **[LibTIFF](http://www.remotesensing.org/libtiff/)** \r\n\r\n   PGURE-SVT currently only supports TIFF image stacks.\r\n\r\n+ **[Armadillo](http://arma.sourceforge.net)**\r\n\r\n   Armadillo is a C++ linear algebra library, and is heavily used in PGURE-SVT to handle the image\r\n   sequences. The latest version (6.400) is recommended.\r\n   \r\n+ **[NLopt](http://ab-initio.mit.edu/wiki/index.php/NLopt)** \r\n\r\n   NLopt is a non-linear optimization library, implementing several different optimization algorithms.\r\n   The latest version (2.4.2) is recommended.\r\n\r\n#### Compiling from source\r\n\r\nTo build PGURE-SVT, unpack the source and `cd` into the unpacked directory:\r\n\r\n```\r\n$ tar -xzf pgure-svt.tar.gz\r\n$ cd pgure-svt\r\n```\r\n\r\nThe next step is to configure the build, and then finally compile it. This will generate \r\nan executable file in the `bin/` directory. \r\n\r\n```\r\n$ cmake .\r\n$ make\r\n```\r\n\r\nTo run PGURE-SVT from any directory, add the following line to your `.bashrc` file including\r\nthe full path to the `bin/` directory:\r\n\r\n```\r\n$ echo alias PGURE-SVT='/path/to/directory/PGURE-SVT' >> ~/.bashrc\r\n$ source ~/.bashrc\r\n```\r\n\r\nYou can now run the program by typing `PGURE-SVT` in the terminal.\r\n\r\n## Using PGURE-SVT\r\n\r\nPGURE-SVT uses a simple command-line interface along with a separate parameter file.\r\n\r\n```\r\n$ PGURE-SVT param.svt\r\n```\r\n\r\nThe parameter file allows the user to customize various options of the PGURE-SVT\r\nalgorithm. An example is provided, with short comments to explain the effects of\r\neach option. For an in-depth explanation of the options, users are referred to the\r\npaper describing the algorithm.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"UA-65991272-1","note":"Don't delete this file! It's used internally to help with page regeneration."}